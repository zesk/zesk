<?php
declare(strict_types=1);

namespace zesk;

class CTest extends Controller {
	public function initialize(): void {
		parent::initialize(); // TODO: Change the autogenerated stub
		$this->application->setOption(__CLASS__, []);
		$this->application->optionAppend(__CLASS__, 'init');
	}

	public function action_index(string $a = '', string $b = ''): string {
		$this->application->optionAppend(__CLASS__, [$a, $b]);
		return "$a|$b";
	}

	public function action_array(string $a, string $b, Request $request): array {
		$this->application->optionAppend(__CLASS__, [$a, $b]);
		return ['first' => $a, 'second' => $b, 'request' => $request];
	}

	public static function getOption(Application $app): array {
		return $app->optionArray(__CLASS__);
	}
}

class Controller_Test extends UnitTest {
	/**
	 *
	 */
	public function test_Controller(): void {
		$app = $this->application;

		$app->addThemePath($this->test_sandbox());
		File::put($this->test_sandbox('test-theme.tpl'), '--Test--<' . "?php\necho \$content;\n?>EOF");

		$app->setOption('cache_router', false);
		$router = $app->router();

		$router->addRoute('.', [
			'controller' => Ctest::class, 'arguments' => [0, 1], 'action' => 'index', 'default' => true,
		]);
		$testRouteStart = 'array'; /* No slashes allowed - indexes 1,2 */
		$router->addRoute($testRouteStart . '(/{what}(/{verb}))', [
			'controller' => Ctest::class, 'arguments' => [1, 2, '{request}'], 'action' => 'array',
		]);

		$expected = ['init'];
		foreach ([
			'', "$testRouteStart", "$testRouteStart/1", "$testRouteStart/Love", "$testRouteStart/One",
			"$testRouteStart/Heart/...lets-get",
		] as $suffix) {
			$request = Request::factory($app, 'http://localhost/' . $suffix);

			$route = $router->match($request);
			$this->assertInstanceOf(Route_Controller::class, $route);

			$response = $route->execute();
			$this->assertInstanceOf(Response::class, $response);
			$response->setPageTheme('test-theme');
			$this->assertEquals('--Test--EOF', $response->render([Response::OPTION_SKIP_HEADERS => true]));

			if (str_starts_with($suffix, $testRouteStart)) {
				$remain = ltrim(StringTools::removePrefix($suffix, $testRouteStart), '/') . '//';

				$expected[] = $remain ? array_slice(explode('/', $remain, 3), 0, 2) : ['', ''];
			}
		}


		$this->assertEquals($expected, CTest::getOption($this->application));
	}
}
